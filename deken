#!/usr/bin/env bash

# Ensure this file is executable via `chmod a+x deken`, then place it
# somewhere on your $PATH, like ~/bin. The rest of Deken will self-install
# on first run into the ~/.deken/ directory.

# Much of this code is pilfered from Clojure's Leiningen tool

export DEKEN_VERSION="0.1"

if [ `id -u` -eq 0 ] && [ "$DEKEN_ROOT" = "" ]; then
    echo "WARNING: You're currently running as root; probably by accident."
    echo "Press control-C to abort or Enter to continue as root."
    echo "Set DEKEN_ROOT to disable this warning."
    read _
fi

if [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "msys" ]]; then
    delimiter=";"
else
    delimiter=":"
fi

if [[ "$OSTYPE" == "cygwin" ]]; then
  cygwin=true
else
  cygwin=false
fi

# This needs to be defined before we call HTTP_CLIENT below
if [ "$HTTP_CLIENT" = "" ]; then
    if type -p curl >/dev/null 2>&1; then
        if [ "$https_proxy" != "" ]; then
            CURL_PROXY="-x $https_proxy"
        fi
        HTTP_CLIENT="curl $CURL_PROXY -f -L -o"
    else
        HTTP_CLIENT="wget -O"
    fi
fi

export DEKEN_HOME="${DEKEN_HOME:-"$HOME/.deken"}"
DEKEN_BASE_URL="https://raw.githubusercontent.com/pure-data/deken/master"
PIP_SOURCE="https://bootstrap.pypa.io/get-pip.py"

if $cygwin; then
    export DEKEN_HOME=`cygpath -w "$DEKEN_HOME"`
fi

function find_binary {
    [ "" == "`which $1`" ] || echo "`which $1`" && (\
    	for p in "$HOME/.local/bin/$1" "$HOME/Library/Python/2.7/bin/$1";
	do
		[ -x "$p" ] && ( echo "$p"; break; )
	done
    )
}

function bail_install {
	echo "Self-installation of Deken failed. Please paste any errors in an issue at https://github.com/pure-data/deken/issues"
	# remove all trace of our attempts to install.
	rm -rf $DEKEN_HOME;
	# bail from this script.
	exit 1;
}

function install_deken {
    echo "This is your first time running deken on this machine."
    echo "I'm going to install myself and my dependencies into ~/.deken now."
    echo "Feel free to ctrl-C now if you don't want to do this."
    sleep 3;
    [ "" == "`which python`" ] && \
        echo "Oops, no Python found! You need Python to run Deken." && bail_install;
    [ "" == "`which make`" ] && \
        echo "Oops, no Make found! You need Make to run Deken." && bail_install;
    [ -d "$DEKEN_HOME" ] || mkdir -p $DEKEN_HOME;
    [ "" == "`find_binary pip`" ] && (\
        ( echo "Installing pip." && \
        $HTTP_CLIENT $DEKEN_HOME/get-pip.py $PIP_SOURCE && \
        python $DEKEN_HOME/get-pip.py --user ) || bail_install);
    [ "" == "`find_binary virtualenv`" ] && (\
        ( echo "Installing virtualenv." && \
        `find_binary pip` install --user virtualenv) || bail_install);
    [ -e "$DEKEN_HOME/requirements.txt" ] || (\
        ( echo "Fetching Python requirements file: $DEKEN_BASE_URL/requirements.txt" && \
        $HTTP_CLIENT $DEKEN_HOME/requirements.txt $DEKEN_BASE_URL/requirements.txt ) || bail_install)
    [ -e "$DEKEN_HOME/requirements.txt" ] || bail_install
    [ -e "$DEKEN_HOME/deken.hy" ] || (\
        ( echo "Fetching main hylang file: $DEKEN_BASE_URL/deken.hy" && \
        $HTTP_CLIENT $DEKEN_HOME/deken.hy $DEKEN_BASE_URL/deken.hy ) || bail_install)
    [ -e "$DEKEN_HOME/deken.hy" ] || bail_install
    [ -d "$DEKEN_HOME/virtualenv" ] || (\
        echo "Setting up the virtual environment." && \
        `find_binary virtualenv` "$DEKEN_HOME/virtualenv" || exit 1)
    [ -x "$DEKEN_HOME/virtualenv/bin/hy" ] || (\
        echo "Installing deken library dependencies." && \
        $DEKEN_HOME/virtualenv/bin/pip install -r $DEKEN_HOME/requirements.txt || exit 1)
}

# make sure we are deployed
[ -d "$DEKEN_HOME" ] || install_deken

# run the real deken command with args passed through
cd $DEKEN_HOME || echo "Sorry, Deken was not set up correctly." && ./virtualenv/bin/hy $DEKEN_HOME/deken.hy $@
